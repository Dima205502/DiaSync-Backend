// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	models "DiaSync/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(arg0 models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), arg0)
}

// DeleteSession mocks base method.
func (m *MockAuthorization) DeleteSession(arg0 models.LogoutR) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockAuthorizationMockRecorder) DeleteSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockAuthorization)(nil).DeleteSession), arg0)
}

// GenerateTokens mocks base method.
func (m *MockAuthorization) GenerateTokens(arg0 models.LoginR) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTokens", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateTokens indicates an expected call of GenerateTokens.
func (mr *MockAuthorizationMockRecorder) GenerateTokens(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTokens", reflect.TypeOf((*MockAuthorization)(nil).GenerateTokens), arg0)
}

// RepeatEmailVerify mocks base method.
func (m *MockAuthorization) RepeatEmailVerify(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepeatEmailVerify", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RepeatEmailVerify indicates an expected call of RepeatEmailVerify.
func (mr *MockAuthorizationMockRecorder) RepeatEmailVerify(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepeatEmailVerify", reflect.TypeOf((*MockAuthorization)(nil).RepeatEmailVerify), arg0)
}

// ReplacementTokens mocks base method.
func (m *MockAuthorization) ReplacementTokens(arg0 models.ReplacementTokensR) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplacementTokens", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReplacementTokens indicates an expected call of ReplacementTokens.
func (mr *MockAuthorizationMockRecorder) ReplacementTokens(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplacementTokens", reflect.TypeOf((*MockAuthorization)(nil).ReplacementTokens), arg0)
}

// ResetPassword mocks base method.
func (m *MockAuthorization) ResetPassword(arg0 models.ResetPasswordR) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockAuthorizationMockRecorder) ResetPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockAuthorization)(nil).ResetPassword), arg0)
}

// VerifyEmail mocks base method.
func (m *MockAuthorization) VerifyEmail(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmail", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyEmail indicates an expected call of VerifyEmail.
func (mr *MockAuthorizationMockRecorder) VerifyEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmail", reflect.TypeOf((*MockAuthorization)(nil).VerifyEmail), arg0)
}

// VerifyNewPassword mocks base method.
func (m *MockAuthorization) VerifyNewPassword(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyNewPassword", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyNewPassword indicates an expected call of VerifyNewPassword.
func (mr *MockAuthorizationMockRecorder) VerifyNewPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyNewPassword", reflect.TypeOf((*MockAuthorization)(nil).VerifyNewPassword), arg0)
}
